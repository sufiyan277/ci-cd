name: CI/CD for Python Service

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Python environment
      - name: Set up Python 3.x
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      # Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Run tests
      - name: Run tests
        run: |
          pytest

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Elastic Beanstalk deployment
      - name: Deploy to Elastic Beanstalk
        run: |
          pip install awsebcli
          eb init -p python-3.x my-app --region ${{ secrets.AWS_REGION }}
          eb deploy

      # Optional ECS Deployment (if using ECS instead of Beanstalk)
      # - name: Login to Amazon ECR
      #   run: |
      #     aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin <your-ecr-repo>
      #
      # - name: Build, Tag, and Push Docker image
      #   run: |
      #     docker build -t <your-service> .
      #     docker tag <your-service>:latest <your-ecr-repo>:latest
      #     docker push <your-ecr-repo>:latest
      #
      # - name: Update ECS Service
      #   run: |
      #     aws ecs update-service --cluster <your-cluster> --service <your-service> --force-new-deployment
